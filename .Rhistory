h
H
install.packages("ggplot2")
install.packages("sp")
install.packages("rgdal")
install.packages("maptools")
install.packages("shiny")
install.packages("dplyr")
install.packages("plyr")
install.packages("rechape2")
install.packages("rechape")
install.packages("gstat")
install.packages("rgeos")
install.packages("ggvis")
install.packages("ggmaps")
install.packages("ggmap")
install.packages("reshape2")
install.packages("choroplethr")
library(choroplethr)
data("df_pop_state")
View(df_pop_state)
head(df_pop_state)
state_choropleth(df_pop_state)
install.packages("choroplethrMaps")
library(choroplethrMaps)
state_choropleth(df_pop_state)
data("df_state_demographics")
View(df_state_demographics)
colnames(df_state_demographics)
df_state_demographics$value = df_state_demographics$per_capita_income
state_choropleth(df_state_demographics)
clear
View(df_state_demographics)
View(df_state_demographics)
state_values = df_state_demographics[df_state_demographics$region == "missouri", c("percent_white", "percent_black")]
View(state_values)
data("df_state_demographics")
data("df_county_demographics")
data("df_county_demographics")
View(df_county_demographics)
county_values = df_county_demographics[df_county_demographics$region == 29189, c("percent_white", "percent_black")]
View(county_values)
View(county_values)
library(choroplethrZip)
install.packages(choroplethrZip)
install.packages(choroplethrZip)
install.packages(choroplethrzip)
df= c("state", "state", "county", "county"), metric = ("percent_white", "percent_black"), percent = c(state_values[1, "percent_white"],  state_values[1, "percent_black"], county_values[1, "percent_white"], county_values[1, "percent_black"]))
df= data.frame (c("state", "state", "county", "county"), metric = ("percent_white", "percent_black"), percent = c(state_values[1, "percent_white"],  state_values[1, "percent_black"], county_values[1, "percent_white"], county_values[1, "percent_black"]))
install.packages("choroplethrZip"")
install.packages("choroplethrZip")
install.packages("choroplethrZip")
df= data.frame (region = c("state", "state", "county", "county"), metric = ("percent_white", "percent_black"), percent = c(state_values[1, "percent_white"],  state_values[1, "percent_black"], county_values[1, "percent_white"], county_values[1, "percent_black"]))
df= data.frame (region = c("state", "state", "county", "county"), metric = c("percent_white", "percent_black"), percent = c(state_values[1, "percent_white"],  state_values[1, "percent_black"], county_values[1, "percent_white"], county_values[1, "percent_black"]))
library(ggplot2)
ggplot(df, aes(region, percent, fill=metric)) +
geom_bar(stat="identity", position="dodge") +
ggtitle("Demographics of the State, County and ZCTA\n of Ferguson, Missouri")
highlight_county = function(county_fips)
{
library(choroplethrMaps)
data(county.map, package="choroplethrMaps", envir=environment())
df = county.map[county.map$region %in% county_fips, ]
geom_polygon(data=df, aes(long, lat, group = group), color = "yellow", fill = NA, size = 1)
}
library(grid.arrange)
install.packages("gridExtra")
install.packages("gridExtra")
library(ggplot2) # for coord_map(), which adds a Mercator projection
data(df_county_demographics)
df_county_demographics$value = df_county_demographics$percent_white
choro_white = county_choropleth(df_county_demographics, state_zoom="missouri", num_colors=1) +
highlight_county(29189) +
ggtitle("Missouri Counties\n Percent White") +
coord_map()
df_county_demographics$value = df_county_demographics$percent_black
choro_black = county_choropleth(df_county_demographics, state_zoom="missouri", num_colors=1) +
highlight_county(29189) +
ggtitle("Missouri Counties\n Percent Black") +
coord_map()
library(gridExtra)
grid.arrange(choro_white, choro_black, ncol=2)
?
?hyper
phyper(2,5,95,6)
1-phyper(2,5,95,6)
library(readr)
Cadena_Productiva_ <- read_csv("~/Desktop/DataJam_2017/Cadena Productiva .csv")
View(Cadena_Productiva_)
View(Cadena_Productiva_)
show(Cadena_Productiva_)
names(Cadena_Productiva_)
colnames(Cadena_Productiva_)
Cadena_Productiva_$DEPARTAMENTO
Cadena_Productiva_$`Código de Municipio`<-"codigo_municipio"
Cadena_Productiva_$`Código de Municipio`<-"codigo_municipio"
grid.arrange(choro_white, choro_black, ncol=2)
str(Cadena_Productiva_)
head(mtcars)
?lm
lm(mpg~qseq,data=mtcars)
lm(mpg~qsec,data=mtcars)
mi modelo<-lm(data=mtcars,formula = mpg~qsec)
mimodelo<-lm(data=mtcars,formula = mpg~qsec)
sumary(mimodelo)
summary(mimodelo)
mimodelo2<-lm(formula = mpg~hp+wt,data = mtcars)
summary(mimodelo2)
str(mimodelo)
mimodelo2#residuals
mimodelo2$residuals
install.packages("lavaan")
library(lavaan)
mydata<-HolzingerSwineford1939
View(mydata)
str(mydata)
?HolzingerSwineford1939
mymodel<- '
Visual=~ x1+x2+x3
'
#ajustar el modelo
mymodelfit<-cfa(mymodel,mydata)
mymodelfit
summart(mymodelfit)
summary(mymodelfit)
summary(mymodelfit,
standardized=T,rsquare=T,
fit.measures=T)
fitmeasures(mymodelfit,fit.measures = c("srmr","rmsea","tli","cfi"))
com_model<- '
Visual=~ x1+x2+x3
textual=~ x4+x5+x6
speed =~ x7+x8+x9'
com_modelfit<-sem(com_model,mydata)
summary(com_modelfit,
standardized=T,rsquare=T,
fit.measures=T)
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggmap")
library(ggplot2)
install.packages("ggplot2")
library(ggplot2)
library(ggmap)
geocode("Pereira")
install.packages("ggplot2")
install.packages("ggmap")
library(ggmap)
library(ggplot2)
library(ggplot2)
install.packages("ggplot2")
library(ggplot2)
library("ggplot2", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
detach("package:ggplot2", unload=TRUE)
library("ggplot2", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
install.packages("lazyeval")
install.packages("lazyeval")
library("ggplot2", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
mtk
mtcars
data<-mtcars
dim(data)
dimensiones<-dim(data)
str(data)
dimensiones[2]
data$mpg[15:20]
filtro<-data$cyl<8
filtro
data2<-data[filtro,]
viw(data2)
View(data2)
data3<-data2[data2$cyl>4,]
mean(data3$mpg)
library(ggplot2)
View(data)
ggplot(data = mtcars, aes(x=wt,y=qsec))+ geom_point()
ggplot(data = mtcars, aes(x=wt,y=qsec))+ geom_point(colours(red))
ggplot(data = mtcars, aes(x=wt,y=qsec))+ geom_point(colours("red"))
ggplot(data = mtcars, aes(x=wt,y=qsec))+ geom_point(colours="red")
ggplot(data = mtcars, aes(x=wt,y=qsec))+ geom_point(colour="red")
ggplot(data = mtcars, aes(x=wt,y=qsec))+ geom_point(colour="blue")
ggplot(data = mtcars, aes(x=wt,y=qsec))+ geom_point(colour="blue")
ggplot(data = mtcars, aes(x=wt,y=qsec))+ geom_point(colour="gray")
ggplot(data = mtcars, aes(x=wt,y=qsec))+ geom_point(colour="green")
mygrafico<-ggplot(data = mtcars, aes(x=wt,y=qsec))+ geom_point(colour="blue")
mygrafico
mygrafico<-ggplot(data = mtcars, aes(x=wt,y=qsec))
mygrafico
mygrafico + geom_point()
ggplot(data = mtcars, aes(x=wt,y=qsec))+ geom_point(color="blue",size=10)
mygrafico<-ggplot(data = mtcars, aes(x=wt,y=qsec))
mygrafico
mygrafico + geom_point(colour="blue")
mygrafico + geom_point(color="blue",size=10)
mygrafico + geom_point(aes(size=mpg))
mi_grafico<- ggplot() + geom_point(data = mtcars,aes(x=wt,y=qsec,color=as.factor(cyl)))
mi_grafico
mi_grafico+geom_point()+geom_line()
ggplot(data = mtcars,aes(x=wt,y=qsec,color=as.factor(cyl)))+geom_point()+geom_line()
ggplot(data = mtcars,aes(x=wt,y=qsec,color=as.factor(cyl)))+geom_point()+geom_line()
mi_grafico_1<-ggplot(data = mtcars,aes(x=wt,y=qsec,color=as.factor(cyl)))+geom_point()+geom_line()
mi_grafico_1
mi_grafico_1+ggtitle("motor trend car Road Test")+ ylab("variable qsec")+xlab("variable wt")+theme(legend.title = element_blank())
mi_grafico_1+ggtitle("motor trend car Road Test")+ ylab("variable qsec")+
xlab("variable wt")+theme(legend.title = element_blank())
p<-ggplot(mtcars,aes(wt,qsec))+geom_point()
p+facet_grid(carb ~ cyl)
ggplot(data=mtcars)+
geom_boxplot(aes(x=factor(cyl),y=mpg),fill="blue")
ggplot(data=mtcars)+
geom_boxplot(aes(x=factor(cyl),y=mpg),fill="darkblue")
install.packages(“swirl”)
install.packages("swirl")
library("swirl")
install_course_zip("/Users/vanessa/Documents/R_Data_Analysis/14_310x_Intro_to_R.zip", multi = FALSE)
swirl()
install.packages("XML")
setwd("~/Documents/R_GetCleanData")
library(XML)
XMLfileUrl<-"https://www.w3schools.com/xml/simple.xml"
doc<-xmlTreeParse(XMLfileUrl, useInternal= TRUE)
rootNode<-xmlRoot(doc)
xmlName(rootNode)
XMLfileUrl<-"https://www.w3schools.com/xml/simple.xml"
doc<-xmlTreeParse(XMLfileUrl, useInternalNodes = TRUE)
rootNode<-xmlRoot(doc)
xmlName(rootNode)
library(XML)
XMLfileUrl<-"https://www.w3schools.com/xml/simple.xml"
doc<-xmlTreeParse(sub("s","",XMLfileUrl), useInternal = TRUE)
class(doc)
library(XML)
XMLfileUrl<-"https://www.w3schools.com/xml/simple.xml"
doc<-xmlTreeParse(XMLfileUrl, useInternalNodes = TRUE)
class(doc)
library(XML)
XMLfileUrl<-"https://www.w3schools.com/xml/simple.xml"
doc<-xmlInternalTreeParse(XMLfileUrl)
class(doc)
install.packages("RCurl")
library(RCurl)
library(XML)
XMLfileUrl<-getURL("https://www.w3schools.com/xml/simple.xml")
doc<-xmlTreeParse(XMLfileUrl, useInternalNodes = True)
class(doc)
library(RCurl)
library(XML)
XMLfileUrl<-getURL("https://www.w3schools.com/xml/simple.xml")
doc<-xmlTreeParse(XMLfileUrl, useInternalNodes = TRUE)
class(doc)
rootNode<-xmlRoot(doc)
xmlName(rootNode)
names(rootNode)
rootNode[[1]]
rootNode[[1]][[1]]
xmlSApply(rootNode,xmlValue)
